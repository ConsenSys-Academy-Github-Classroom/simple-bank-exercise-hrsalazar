{
  "contractName": "SimpleBank",
  "abi": [
    {
      "anonymous": false,
      "inputs": [],
      "name": "LogDepositMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "LogEnrolled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "LogWithdrawal",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "enroll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"LogDepositMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogEnrolled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogWithdrawal\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enroll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"deposit()\":{\"return\":\"The balance of the user after the deposit is made\"},\"enroll()\":{\"return\":\"The users enrolled status\"},\"getBalance()\":{\"return\":\"The balance of the user\"},\"withdraw(uint256)\":{\"details\":\"This does not return any excess ether sent to it\",\"params\":{\"withdrawAmount\":\"amount you want to withdraw\"},\"return\":\"The balance remaining for the user\"}}},\"userdoc\":{\"methods\":{\"deposit()\":{\"notice\":\"Deposit ether into bank\"},\"enroll()\":{\"notice\":\"Enroll a customer with the bank\"},\"getBalance()\":{\"notice\":\"Get balance\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw ether from bank\"}}}},\"settings\":{\"compilationTarget\":{\"/Users/macbook/github-classroom/ConsenSys-Academy-Github-Classroom/simple-bank-exercise-hrsalazar/contracts/SimpleBank.sol\":\"SimpleBank\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/macbook/github-classroom/ConsenSys-Academy-Github-Classroom/simple-bank-exercise-hrsalazar/contracts/SimpleBank.sol\":{\"keccak256\":\"0x64f393026fd1d1d7634c65edf6f5771cc9a9522aa1d0d532adac44311f8e9d3c\",\"urls\":[\"bzz-raw://aaf117207df99b4ec8f84b960348305bc77a88b25b15240ccf2edbb7c5ab4a76\",\"dweb:/ipfs/QmV2SfpU6jyRVxoKwCi8j324YBpvA5ztMr3QRhFWsV9JLD\"]}},\"version\":1}",
  "bytecode": "0x608060405233600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005157600080fd5b506101ba806100616000396000f3fe60806040526004361061003f5760003560e01c806312065fe0146100445780632e1a7d4d1461006f578063d0e30db0146100be578063e65f2a7e146100e9575b600080fd5b34801561005057600080fd5b50610059610118565b6040518082815260200191505060405180910390f35b34801561007b57600080fd5b506100a86004803603602081101561009257600080fd5b810190808035906020019092919050505061011d565b6040518082815260200191505060405180910390f35b3480156100ca57600080fd5b506100d3610124565b6040518082815260200191505060405180910390f35b3480156100f557600080fd5b506100fe610129565b604051808215151515815260200191505060405180910390f35b600090565b6000919050565b600090565b600060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055509056fea265627a7a72315820ab1df70c9f7c9514004bcab38dd98dc56db49ed6373865b13ac0555105a03d7064736f6c63430005100032",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c806312065fe0146100445780632e1a7d4d1461006f578063d0e30db0146100be578063e65f2a7e146100e9575b600080fd5b34801561005057600080fd5b50610059610118565b6040518082815260200191505060405180910390f35b34801561007b57600080fd5b506100a86004803603602081101561009257600080fd5b810190808035906020019092919050505061011d565b6040518082815260200191505060405180910390f35b3480156100ca57600080fd5b506100d3610124565b6040518082815260200191505060405180910390f35b3480156100f557600080fd5b506100fe610129565b604051808215151515815260200191505060405180910390f35b600090565b6000919050565b600090565b600060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055509056fea265627a7a72315820ab1df70c9f7c9514004bcab38dd98dc56db49ed6373865b13ac0555105a03d7064736f6c63430005100032",
  "sourceMap": "246:3318:1:-;;;803:10;787:26;;;;;;;;;;;;;;;;;;;;246:3318;8:9:-1;5:2;;;30:1;27;20:12;5:2;246:3318:1;;;;;;;",
  "deployedSourceMap": "246:3318:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1603:8;;;1692:249;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1692:249:1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2995:567;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2995:567:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2995:567:1;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2317:460;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2317:460:1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2071:134;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2071:134:1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1692:249;1730:4;1692:249;:::o;2995:567::-;3050:4;2995:567;;;:::o;2317:460::-;2352:4;2317:460;:::o;2071:134::-;2105:4;2194;2171:8;:20;2180:10;2171:20;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;2071:134;:::o",
  "source": "/*\n * This exercise has been updated to use Solidity version 0.8.5\n * See the latest Solidity updates at\n * https://solidity.readthedocs.io/en/latest/080-breaking-changes.html\n */\n// SPDX-License-Identifier: MIT\npragma solidity >=0.5.16 <0.9.0;\n\ncontract SimpleBank {\n\n    /* State variables\n     */\n    \n    \n    // Fill in the visibility keyword. \n    // Hint: We want to protect our users balance from other contracts\n    mapping (address => uint) balances ;\n    \n    // Fill in the visibility keyword\n    // Hint: We want to create a getter function and allow contracts to be able\n    //       to see if a user is enrolled.\n    mapping (address => bool) enrolled;\n\n    // Let's make sure everyone knows who owns the bank, yes, fill in the\n    // appropriate visilibility keyword\n    address owner = msg.sender;\n    \n    /* Events - publicize actions to external listeners\n     */\n    \n    // Add an argument for this event, an accountAddress\n    event LogEnrolled();\n\n    // Add 2 arguments for this event, an accountAddress and an amount\n    event LogDepositMade();\n\n    // Create an event called LogWithdrawal\n    // Hint: it should take 3 arguments: an accountAddress, withdrawAmount and a newBalance \n    event LogWithdrawal();\n\n    /* Functions\n     */\n\n    // Fallback function - Called if other functions don't match call or\n    // sent ether without data\n    // Typically, called when invalid data is sent\n    // Added so ether sent to this contract is reverted if the contract fails\n    // otherwise, the sender's money is transferred to contract\n    function () external payable {\n        revert();\n    }\n\n    /// @notice Get balance\n    /// @return The balance of the user\n    function getBalance() public returns (uint) {\n      // 1. A SPECIAL KEYWORD prevents function from editing state variables;\n      //    allows function to run locally/off blockchain\n      // 2. Get the balance of the sender of this transaction\n    }\n\n    /// @notice Enroll a customer with the bank\n    /// @return The users enrolled status\n    // Emit the appropriate event\n    function enroll() public returns (bool){\n      // 1. enroll of the sender of this transaction\n      enrolled[msg.sender] = true;\n    }\n\n    /// @notice Deposit ether into bank\n    /// @return The balance of the user after the deposit is made\n    function deposit() public returns (uint) {\n      // 1. Add the appropriate keyword so that this function can receive ether\n    \n      // 2. Users should be enrolled before they can make deposits\n\n      // 3. Add the amount to the user's balance. Hint: the amount can be\n      //    accessed from of the global variable `msg`\n\n      // 4. Emit the appropriate event associated with this function\n\n      // 5. return the balance of sndr of this transaction\n    }\n\n    /// @notice Withdraw ether from bank\n    /// @dev This does not return any excess ether sent to it\n    /// @param withdrawAmount amount you want to withdraw\n    /// @return The balance remaining for the user\n    function withdraw(uint withdrawAmount) public returns (uint) {\n      // If the sender's balance is at least the amount they want to withdraw,\n      // Subtract the amount from the sender's balance, and try to send that amount of ether\n      // to the user attempting to withdraw. \n      // return the user's balance.\n\n      // 1. Use a require expression to guard/ensure sender has enough funds\n\n      // 2. Transfer Eth to the sender and decrement the withdrawal amount from\n      //    sender's balance\n\n      // 3. Emit the appropriate event for this message\n    }\n}\n",
  "sourcePath": "/Users/macbook/github-classroom/ConsenSys-Academy-Github-Classroom/simple-bank-exercise-hrsalazar/contracts/SimpleBank.sol",
  "ast": {
    "absolutePath": "/Users/macbook/github-classroom/ConsenSys-Academy-Github-Classroom/simple-bank-exercise-hrsalazar/contracts/SimpleBank.sol",
    "exportedSymbols": {
      "SimpleBank": [
        93
      ]
    },
    "id": 94,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 34,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".16",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "212:32:1"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 93,
        "linearizedBaseContracts": [
          93
        ],
        "name": "SimpleBank",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 38,
            "name": "balances",
            "nodeType": "VariableDeclaration",
            "scope": 93,
            "src": "425:34:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 37,
              "keyType": {
                "id": 35,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "434:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "425:25:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 36,
                "name": "uint",
                "nodeType": "ElementaryTypeName",
                "src": "445:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 42,
            "name": "enrolled",
            "nodeType": "VariableDeclaration",
            "scope": 93,
            "src": "632:34:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 41,
              "keyType": {
                "id": 39,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "641:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "632:25:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 40,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "652:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 46,
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 93,
            "src": "787:26:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 43,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "787:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "argumentTypes": null,
              "expression": {
                "argumentTypes": null,
                "id": 44,
                "name": "msg",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 108,
                "src": "803:3:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_magic_message",
                  "typeString": "msg"
                }
              },
              "id": 45,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "memberName": "sender",
              "nodeType": "MemberAccess",
              "referencedDeclaration": null,
              "src": "803:10:1",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "internal"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 48,
            "name": "LogEnrolled",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 47,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "967:2:1"
            },
            "src": "950:20:1"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 50,
            "name": "LogDepositMade",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 49,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1067:2:1"
            },
            "src": "1047:23:1"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 52,
            "name": "LogWithdrawal",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 51,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1232:2:1"
            },
            "src": "1213:22:1"
          },
          {
            "body": {
              "id": 58,
              "nodeType": "Block",
              "src": "1593:25:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 55,
                      "name": "revert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        113,
                        114
                      ],
                      "referencedDeclaration": 113,
                      "src": "1603:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 56,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1603:8:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 57,
                  "nodeType": "ExpressionStatement",
                  "src": "1603:8:1"
                }
              ]
            },
            "documentation": null,
            "id": 59,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 53,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1573:2:1"
            },
            "returnParameters": {
              "id": 54,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1593:0:1"
            },
            "scope": 93,
            "src": "1564:54:1",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 64,
              "nodeType": "Block",
              "src": "1736:205:1",
              "statements": []
            },
            "documentation": "@notice Get balance\n @return The balance of the user",
            "id": 65,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getBalance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 60,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1711:2:1"
            },
            "returnParameters": {
              "id": 63,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 62,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 65,
                  "src": "1730:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1730:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1729:6:1"
            },
            "scope": 93,
            "src": "1692:249:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 77,
              "nodeType": "Block",
              "src": "2110:95:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 75,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 70,
                        "name": "enrolled",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 42,
                        "src": "2171:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 73,
                      "indexExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 71,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 108,
                          "src": "2180:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 72,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "2180:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2171:20:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 74,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2194:4:1",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "2171:27:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 76,
                  "nodeType": "ExpressionStatement",
                  "src": "2171:27:1"
                }
              ]
            },
            "documentation": "@notice Enroll a customer with the bank\n @return The users enrolled status",
            "id": 78,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "enroll",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 66,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2086:2:1"
            },
            "returnParameters": {
              "id": 69,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 68,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 78,
                  "src": "2105:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 67,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2105:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2104:6:1"
            },
            "scope": 93,
            "src": "2071:134:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 83,
              "nodeType": "Block",
              "src": "2358:419:1",
              "statements": []
            },
            "documentation": "@notice Deposit ether into bank\n @return The balance of the user after the deposit is made",
            "id": 84,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deposit",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 79,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2333:2:1"
            },
            "returnParameters": {
              "id": 82,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 81,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 84,
                  "src": "2352:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 80,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "2352:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2351:6:1"
            },
            "scope": 93,
            "src": "2317:460:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 91,
              "nodeType": "Block",
              "src": "3056:506:1",
              "statements": []
            },
            "documentation": "@notice Withdraw ether from bank\n @dev This does not return any excess ether sent to it\n @param withdrawAmount amount you want to withdraw\n @return The balance remaining for the user",
            "id": 92,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 87,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 86,
                  "name": "withdrawAmount",
                  "nodeType": "VariableDeclaration",
                  "scope": 92,
                  "src": "3013:19:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 85,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3013:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3012:21:1"
            },
            "returnParameters": {
              "id": 90,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 89,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 92,
                  "src": "3050:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 88,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3050:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3049:6:1"
            },
            "scope": 93,
            "src": "2995:567:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 94,
        "src": "246:3318:1"
      }
    ],
    "src": "212:3353:1"
  },
  "legacyAST": {
    "absolutePath": "/Users/macbook/github-classroom/ConsenSys-Academy-Github-Classroom/simple-bank-exercise-hrsalazar/contracts/SimpleBank.sol",
    "exportedSymbols": {
      "SimpleBank": [
        93
      ]
    },
    "id": 94,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 34,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".16",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "212:32:1"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 93,
        "linearizedBaseContracts": [
          93
        ],
        "name": "SimpleBank",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 38,
            "name": "balances",
            "nodeType": "VariableDeclaration",
            "scope": 93,
            "src": "425:34:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 37,
              "keyType": {
                "id": 35,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "434:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "425:25:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 36,
                "name": "uint",
                "nodeType": "ElementaryTypeName",
                "src": "445:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 42,
            "name": "enrolled",
            "nodeType": "VariableDeclaration",
            "scope": 93,
            "src": "632:34:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 41,
              "keyType": {
                "id": 39,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "641:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "632:25:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 40,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "652:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 46,
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 93,
            "src": "787:26:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 43,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "787:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "argumentTypes": null,
              "expression": {
                "argumentTypes": null,
                "id": 44,
                "name": "msg",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 108,
                "src": "803:3:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_magic_message",
                  "typeString": "msg"
                }
              },
              "id": 45,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "memberName": "sender",
              "nodeType": "MemberAccess",
              "referencedDeclaration": null,
              "src": "803:10:1",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "internal"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 48,
            "name": "LogEnrolled",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 47,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "967:2:1"
            },
            "src": "950:20:1"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 50,
            "name": "LogDepositMade",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 49,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1067:2:1"
            },
            "src": "1047:23:1"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 52,
            "name": "LogWithdrawal",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 51,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1232:2:1"
            },
            "src": "1213:22:1"
          },
          {
            "body": {
              "id": 58,
              "nodeType": "Block",
              "src": "1593:25:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 55,
                      "name": "revert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        113,
                        114
                      ],
                      "referencedDeclaration": 113,
                      "src": "1603:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 56,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1603:8:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 57,
                  "nodeType": "ExpressionStatement",
                  "src": "1603:8:1"
                }
              ]
            },
            "documentation": null,
            "id": 59,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 53,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1573:2:1"
            },
            "returnParameters": {
              "id": 54,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1593:0:1"
            },
            "scope": 93,
            "src": "1564:54:1",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 64,
              "nodeType": "Block",
              "src": "1736:205:1",
              "statements": []
            },
            "documentation": "@notice Get balance\n @return The balance of the user",
            "id": 65,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getBalance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 60,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1711:2:1"
            },
            "returnParameters": {
              "id": 63,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 62,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 65,
                  "src": "1730:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1730:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1729:6:1"
            },
            "scope": 93,
            "src": "1692:249:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 77,
              "nodeType": "Block",
              "src": "2110:95:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 75,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 70,
                        "name": "enrolled",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 42,
                        "src": "2171:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 73,
                      "indexExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 71,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 108,
                          "src": "2180:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 72,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "2180:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2171:20:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 74,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2194:4:1",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "2171:27:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 76,
                  "nodeType": "ExpressionStatement",
                  "src": "2171:27:1"
                }
              ]
            },
            "documentation": "@notice Enroll a customer with the bank\n @return The users enrolled status",
            "id": 78,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "enroll",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 66,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2086:2:1"
            },
            "returnParameters": {
              "id": 69,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 68,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 78,
                  "src": "2105:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 67,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2105:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2104:6:1"
            },
            "scope": 93,
            "src": "2071:134:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 83,
              "nodeType": "Block",
              "src": "2358:419:1",
              "statements": []
            },
            "documentation": "@notice Deposit ether into bank\n @return The balance of the user after the deposit is made",
            "id": 84,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deposit",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 79,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2333:2:1"
            },
            "returnParameters": {
              "id": 82,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 81,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 84,
                  "src": "2352:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 80,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "2352:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2351:6:1"
            },
            "scope": 93,
            "src": "2317:460:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 91,
              "nodeType": "Block",
              "src": "3056:506:1",
              "statements": []
            },
            "documentation": "@notice Withdraw ether from bank\n @dev This does not return any excess ether sent to it\n @param withdrawAmount amount you want to withdraw\n @return The balance remaining for the user",
            "id": 92,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 87,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 86,
                  "name": "withdrawAmount",
                  "nodeType": "VariableDeclaration",
                  "scope": 92,
                  "src": "3013:19:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 85,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3013:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3012:21:1"
            },
            "returnParameters": {
              "id": 90,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 89,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 92,
                  "src": "3050:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 88,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3050:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3049:6:1"
            },
            "scope": 93,
            "src": "2995:567:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 94,
        "src": "246:3318:1"
      }
    ],
    "src": "212:3353:1"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.16+commit.9c3226ce.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {
        "0x8038576435f0e365f39497b3c0a20a6003fb1faf839da4fe2ee2372fc684b2d6": {
          "anonymous": false,
          "inputs": [],
          "name": "LogDepositMade",
          "type": "event"
        },
        "0x6e6775f0cd99d66a7638833e0cf89d3d05958e4bbb550a530c9488c7515771ea": {
          "anonymous": false,
          "inputs": [],
          "name": "LogEnrolled",
          "type": "event"
        },
        "0x28da05d450d325653b840a56aabf28d5be93214a45266734feb6ff65c6e01afe": {
          "anonymous": false,
          "inputs": [],
          "name": "LogWithdrawal",
          "type": "event"
        }
      },
      "links": {},
      "address": "0xa8a6e33ed34EF760b836cf48B3168cde312BeCF6",
      "transactionHash": "0x9d71779b22865b2c58509194c083476fbbc6d07d210be4358c951a391022e249"
    }
  },
  "schemaVersion": "3.3.0",
  "updatedAt": "2021-10-07T04:45:43.862Z",
  "networkType": "ethereum",
  "devdoc": {
    "methods": {
      "deposit()": {
        "return": "The balance of the user after the deposit is made"
      },
      "enroll()": {
        "return": "The users enrolled status"
      },
      "getBalance()": {
        "return": "The balance of the user"
      },
      "withdraw(uint256)": {
        "details": "This does not return any excess ether sent to it",
        "params": {
          "withdrawAmount": "amount you want to withdraw"
        },
        "return": "The balance remaining for the user"
      }
    }
  },
  "userdoc": {
    "methods": {
      "deposit()": {
        "notice": "Deposit ether into bank"
      },
      "enroll()": {
        "notice": "Enroll a customer with the bank"
      },
      "getBalance()": {
        "notice": "Get balance"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw ether from bank"
      }
    }
  }
}